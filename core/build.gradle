
apply plugin: 'com.android.library'
apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.squareup.sqldelight'
apply plugin: 'dev.icerock.mobile.multiplatform-resources'

group = 'com.kmp_starter.app.core'
version = 1.0

android {
    compileSdkVersion 29
    buildToolsVersion = '29.0.2'
    defaultConfig {
        minSdkVersion 21
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

kotlin {
    targets {
        fromPreset(presets.android, 'android')

        def buildForDevice = project.findProperty("device")?.toBoolean() ?: false
        def iosPreset = (buildForDevice) ? presets.iosArm64 : presets.iosX64
        fromPreset(iosPreset, 'ios') {
            binaries {
                framework {
                    // Disable bitcode embedding for the simulator build.
                    if (!buildForDevice) {
                        embedBitcode("disable")
                    }
                }
            }
        }
    }

    sourceSets {
        androidMain {
            dependencies {
                //api project(':data')
                // Kotlin
                implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
                implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

                // Coroutines
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"

                // Ktor
                implementation "io.ktor:ktor-client-auth-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-android:$ktor_version"
                implementation "io.ktor:ktor-client-core-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-json-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-logging-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-serialization-jvm:$ktor_version"
                implementation "org.slf4j:slf4j-android:$slf4j_version"

                // Serialize
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"

                // SQLDelight
                implementation "com.squareup.sqldelight:android-driver:$sqldelight_version"

                implementation "androidx.lifecycle:lifecycle-viewmodel:2.1.0"
            }
        }
        iosMain {
            dependencies {
                //implementation project(':data')

                // Coroutines
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutines_version"

                // Ktor
                implementation "io.ktor:ktor-client-auth-native:$ktor_version"
                implementation "io.ktor:ktor-client-ios:$ktor_version"
                implementation "io.ktor:ktor-client-core-native:$ktor_version"
                implementation "io.ktor:ktor-client-json-native:$ktor_version"
                implementation "io.ktor:ktor-client-logging-native:$ktor_version"
                implementation "io.ktor:ktor-client-serialization-native:$ktor_version"

                // Serialize
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"

                // SQLDelight
                implementation "com.squareup.sqldelight:ios-driver:$sqldelight_version"
            }
        }
        commonMain {
            dependencies {
                api "com.kmp_starter.data:data:0.0.1"

                // Kotlin
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"

                // Coroutines
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"

                // Kodein
                implementation "org.kodein.di:kodein-di-core:$kodein_version"
                implementation "org.kodein.di:kodein-di-erased:$kodein_version"

                // Ktor
                implementation "io.ktor:ktor-client-auth:$ktor_version"
                implementation "io.ktor:ktor-client-core:$ktor_version"
                implementation "io.ktor:ktor-client-json:$ktor_version"
                implementation "io.ktor:ktor-client-logging:$ktor_version"
                implementation "io.ktor:ktor-client-serialization:$ktor_version"

                // Serialize
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"

                // SQLDelight
                implementation "com.squareup.sqldelight:runtime:$sqldelight_version"

                api "com.russhwolf:multiplatform-settings:0.5"
                api "dev.icerock.moko:resources:$moko_version"
            }
        }
        commonTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-common"
                implementation "org.jetbrains.kotlin:kotlin-test-annotations-common"

                //implementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
            }
        }
        androidTest {
            dependencies {
                implementation "junit:junit:4.12"
                implementation "org.jetbrains.kotlin:kotlin-test"
                implementation "org.jetbrains.kotlin:kotlin-test-junit"

                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
            }
        }
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
        jvmTarget = '1.8'
    }
}

sqldelight {
    KotlinDatabase {
        packageName = "com.kmp_starter.core"
        sourceFolders = ["sqldelight"]
        schemaOutputDirectory = file("src/main/sqldelight/migrations")
    }
}

multiplatformResources {
    multiplatformResourcesPackage = "com.kmp_starter.core"
}

task copyFramework {
    def buildType = project.findProperty("kotlin.build.type") ?: "DEBUG"
    dependsOn "link${buildType.toLowerCase().capitalize()}FrameworkIos"

    doLast {
        def srcFile = kotlin.targets.ios.binaries.getFramework(buildType).outputFile
        def targetDir = getProperty("configuration.build.dir")
        copy {
            from srcFile.parent
            into targetDir
            include 'core.framework/**'
            include 'core.framework.dSYM'
        }
    }
}

task iosTest {
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
    dependsOn 'linkTestDebugExecutableIos'
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'ios' on an iOS simulator"

    doLast {
        def binary = kotlin.targets.ios.binaries.getExecutable('test', 'DEBUG').outputFile
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
        }
    }
}
